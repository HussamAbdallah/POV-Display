
POV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000780  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00000780  00000814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000da  008000d8  008000d8  0000088c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f9d  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000797  00000000  00000000  0000190d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066e  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000476  00000000  00000000  00002880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000497  00000000  00000000  00002cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000318d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3d       	cpi	r26, 0xD8	; 216
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 ed       	ldi	r26, 0xD8	; 216
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3b       	cpi	r26, 0xB2	; 178
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  8a:	0c 94 be 03 	jmp	0x77c	; 0x77c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delayMicroseconds>:
		}
		
		draw_a_char(blank,de);
		
	}
}
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	39 f0       	breq	.+14     	; 0xa4 <delayMicroseconds+0x12>
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	02 97       	sbiw	r24, 0x02	; 2
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <delayMicroseconds+0xe>
  a4:	08 95       	ret

000000a6 <main>:


int main(void)
{
	
	micros_init();
  a6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <micros_init>
	DDRD = 0x00;
  aa:	11 ba       	out	0x11, r1	; 17
	DDRA = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a bb       	out	0x1a, r24	; 26
	MCUCR = 1<<ISC01 | 1<<ISC00;          // interrupt with falling edge (one full rotation)
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	85 bf       	out	0x35, r24	; 53
	GICR = (1<<INT0);
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	8b bf       	out	0x3b, r24	; 59
	sei(); 
  b8:	78 94       	sei
	
    while (1) 
    {
		current_angle_t = micros();
  ba:	0e 94 c4 01 	call	0x388	; 0x388 <micros>
  be:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <current_angle_t>
  c2:	70 93 a3 01 	sts	0x01A3, r23	; 0x8001a3 <current_angle_t+0x1>
  c6:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <current_angle_t+0x2>
  ca:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <current_angle_t+0x3>
		sei();
  ce:	78 94       	sei
		required_angle_t = current_angle_t - angle_0_t;
  d0:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <current_angle_t>
  d4:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <current_angle_t+0x1>
  d8:	a0 91 a4 01 	lds	r26, 0x01A4	; 0x8001a4 <current_angle_t+0x2>
  dc:	b0 91 a5 01 	lds	r27, 0x01A5	; 0x8001a5 <current_angle_t+0x3>
  e0:	c0 90 ae 01 	lds	r12, 0x01AE	; 0x8001ae <angle_0_t>
  e4:	d0 90 af 01 	lds	r13, 0x01AF	; 0x8001af <angle_0_t+0x1>
  e8:	e0 90 b0 01 	lds	r14, 0x01B0	; 0x8001b0 <angle_0_t+0x2>
  ec:	f0 90 b1 01 	lds	r15, 0x01B1	; 0x8001b1 <angle_0_t+0x3>
  f0:	bc 01       	movw	r22, r24
  f2:	cd 01       	movw	r24, r26
  f4:	6c 19       	sub	r22, r12
  f6:	7d 09       	sbc	r23, r13
  f8:	8e 09       	sbc	r24, r14
  fa:	9f 09       	sbc	r25, r15
  fc:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <required_angle_t>
 100:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <required_angle_t+0x1>
 104:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <required_angle_t+0x2>
 108:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <required_angle_t+0x3>
		//angle = required_angle_t/one_deg;   // in degrees
		

			
		if ( (required_angle_t >=one_deg*120) && (required_angle_t < one_deg*121) && (text_ok) )		
 10c:	0e 94 9a 02 	call	0x534	; 0x534 <__floatunsisf>
 110:	6b 01       	movw	r12, r22
 112:	7c 01       	movw	r14, r24
 114:	80 90 d9 00 	lds	r8, 0x00D9	; 0x8000d9 <one_deg>
 118:	90 90 da 00 	lds	r9, 0x00DA	; 0x8000da <one_deg+0x1>
 11c:	a0 90 db 00 	lds	r10, 0x00DB	; 0x8000db <one_deg+0x2>
 120:	b0 90 dc 00 	lds	r11, 0x00DC	; 0x8000dc <one_deg+0x3>
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	40 ef       	ldi	r20, 0xF0	; 240
 12a:	52 e4       	ldi	r21, 0x42	; 66
 12c:	c5 01       	movw	r24, r10
 12e:	b4 01       	movw	r22, r8
 130:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__mulsf3>
 134:	9b 01       	movw	r18, r22
 136:	ac 01       	movw	r20, r24
 138:	c7 01       	movw	r24, r14
 13a:	b6 01       	movw	r22, r12
 13c:	0e 94 4c 03 	call	0x698	; 0x698 <__gesf2>
 140:	88 23       	and	r24, r24
 142:	0c f4       	brge	.+2      	; 0x146 <main+0xa0>
 144:	71 c0       	rjmp	.+226    	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	42 ef       	ldi	r20, 0xF2	; 242
 14c:	52 e4       	ldi	r21, 0x42	; 66
 14e:	c5 01       	movw	r24, r10
 150:	b4 01       	movw	r22, r8
 152:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__mulsf3>
 156:	9b 01       	movw	r18, r22
 158:	ac 01       	movw	r20, r24
 15a:	c7 01       	movw	r24, r14
 15c:	b6 01       	movw	r22, r12
 15e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__cmpsf2>
 162:	88 23       	and	r24, r24
 164:	0c f0       	brlt	.+2      	; 0x168 <main+0xc2>
 166:	60 c0       	rjmp	.+192    	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 168:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__data_end>
 16c:	81 11       	cpse	r24, r1
 16e:	55 c0       	rjmp	.+170    	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 170:	5b c0       	rjmp	.+182    	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
				{
					for (int n=0; n<=sizeof(p_image); n++)
					{                 // every n represent a row in the char
						for (uint8_t Pin = 1; Pin<=7; Pin++)
						{   // even Pin represent a led in the row
							if ( READ_BIT(*(p_image+n),Pin) ==0)                // read lsb first
 172:	fb 01       	movw	r30, r22
 174:	e0 5a       	subi	r30, 0xA0	; 160
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	50 81       	ld	r21, Z
 17a:	e4 2f       	mov	r30, r20
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	9c 01       	movw	r18, r24
 184:	04 2e       	mov	r0, r20
 186:	02 c0       	rjmp	.+4      	; 0x18c <main+0xe6>
 188:	22 0f       	add	r18, r18
 18a:	33 1f       	adc	r19, r19
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <main+0xe2>
 190:	85 2f       	mov	r24, r21
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	82 23       	and	r24, r18
 196:	93 23       	and	r25, r19
 198:	04 2e       	mov	r0, r20
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <main+0xfa>
 19c:	95 95       	asr	r25
 19e:	87 95       	ror	r24
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <main+0xf6>
 1a4:	89 2b       	or	r24, r25
 1a6:	89 f4       	brne	.+34     	; 0x1ca <main+0x124>
							{
								PORTA &= ~(1<<(7-Pin));
 1a8:	2b b3       	in	r18, 0x1b	; 27
 1aa:	87 e0       	ldi	r24, 0x07	; 7
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	dc 01       	movw	r26, r24
 1b0:	ae 1b       	sub	r26, r30
 1b2:	bf 0b       	sbc	r27, r31
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <main+0x118>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	aa 95       	dec	r26
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <main+0x114>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	8b bb       	out	0x1b, r24	; 27
 1c8:	0e c0       	rjmp	.+28     	; 0x1e6 <main+0x140>
							}
							else
							{
								PORTA |= (1<<(7-Pin));
 1ca:	5b b3       	in	r21, 0x1b	; 27
 1cc:	27 e0       	ldi	r18, 0x07	; 7
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	2e 1b       	sub	r18, r30
 1d2:	3f 0b       	sbc	r19, r31
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <main+0x138>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	2a 95       	dec	r18
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <main+0x134>
 1e2:	85 2b       	or	r24, r21
 1e4:	8b bb       	out	0x1b, r24	; 27
			
		if ( (required_angle_t >=one_deg*120) && (required_angle_t < one_deg*121) && (text_ok) )		
				{
					for (int n=0; n<=sizeof(p_image); n++)
					{                 // every n represent a row in the char
						for (uint8_t Pin = 1; Pin<=7; Pin++)
 1e6:	4f 5f       	subi	r20, 0xFF	; 255
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <main+0x146>
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	48 30       	cpi	r20, 0x08	; 8
 1ee:	08 f2       	brcs	.-126    	; 0x172 <main+0xcc>
							else
							{
								PORTA |= (1<<(7-Pin));
							}
						}
						delayMicroseconds(one_deg*3);             // wait between a row and the next
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	40 e4       	ldi	r20, 0x40	; 64
 1f6:	50 e4       	ldi	r21, 0x40	; 64
 1f8:	60 91 d9 00 	lds	r22, 0x00D9	; 0x8000d9 <one_deg>
 1fc:	70 91 da 00 	lds	r23, 0x00DA	; 0x8000da <one_deg+0x1>
 200:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <one_deg+0x2>
 204:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <one_deg+0x3>
 208:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__mulsf3>
 20c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fixunssfsi>
 210:	cb 01       	movw	r24, r22
 212:	0e 94 49 00 	call	0x92	; 0x92 <delayMicroseconds>
		

			
		if ( (required_angle_t >=one_deg*120) && (required_angle_t < one_deg*121) && (text_ok) )		
				{
					for (int n=0; n<=sizeof(p_image); n++)
 216:	21 96       	adiw	r28, 0x01	; 1
 218:	02 c0       	rjmp	.+4      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 21a:	c0 e0       	ldi	r28, 0x00	; 0
 21c:	d0 e0       	ldi	r29, 0x00	; 0
 21e:	be 01       	movw	r22, r28
 220:	c9 37       	cpi	r28, 0x79	; 121
 222:	d1 05       	cpc	r29, r1
 224:	10 f3       	brcs	.-60     	; 0x1ea <main+0x144>
 226:	49 cf       	rjmp	.-366    	; 0xba <main+0x14>
					}
		//draw_a_char(p_image,one_deg*3);
				}
				else
				{
					PORTA = 0x00;
 228:	1b ba       	out	0x1b, r1	; 27
 22a:	47 cf       	rjmp	.-370    	; 0xba <main+0x14>

0000022c <__vector_1>:
    
}
}

ISR(INT0_vect)
{
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31

 	intrrupt_time =  micros();
 252:	0e 94 c4 01 	call	0x388	; 0x388 <micros>
 256:	60 93 e6 00 	sts	0x00E6, r22	; 0x8000e6 <intrrupt_time>
 25a:	70 93 e7 00 	sts	0x00E7, r23	; 0x8000e7 <intrrupt_time+0x1>
 25e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <intrrupt_time+0x2>
 262:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <intrrupt_time+0x3>
	sei();
 266:	78 94       	sei
	if (PIND & 0b00000100)
 268:	82 9b       	sbis	0x10, 2	; 16
 26a:	56 c0       	rjmp	.+172    	; 0x318 <__vector_1+0xec>
	{
		if (prev_state == 0)           // this is the first rotation of the POV
 26c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <prev_state>
 270:	81 11       	cpse	r24, r1
 272:	14 c0       	rjmp	.+40     	; 0x29c <__vector_1+0x70>
		{
			prev_state=1;             // This is not the first anymore
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <prev_state>
			counter1 = intrrupt_time;
 27a:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <intrrupt_time>
 27e:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <intrrupt_time+0x1>
 282:	a0 91 e8 00 	lds	r26, 0x00E8	; 0x8000e8 <intrrupt_time+0x2>
 286:	b0 91 e9 00 	lds	r27, 0x00E9	; 0x8000e9 <intrrupt_time+0x3>
 28a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <counter1>
 28e:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <counter1+0x1>
 292:	a0 93 e4 00 	sts	0x00E4, r26	; 0x8000e4 <counter1+0x2>
 296:	b0 93 e5 00 	sts	0x00E5, r27	; 0x8000e5 <counter1+0x3>
 29a:	3e c0       	rjmp	.+124    	; 0x318 <__vector_1+0xec>
		}
		
		else       // The second full rotation interrupt will enter here
		{
			full_rotation = intrrupt_time - counter1;
 29c:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <intrrupt_time>
 2a0:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <intrrupt_time+0x1>
 2a4:	a0 91 e8 00 	lds	r26, 0x00E8	; 0x8000e8 <intrrupt_time+0x2>
 2a8:	b0 91 e9 00 	lds	r27, 0x00E9	; 0x8000e9 <intrrupt_time+0x3>
 2ac:	00 91 e2 00 	lds	r16, 0x00E2	; 0x8000e2 <counter1>
 2b0:	10 91 e3 00 	lds	r17, 0x00E3	; 0x8000e3 <counter1+0x1>
 2b4:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <counter1+0x2>
 2b8:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <counter1+0x3>
 2bc:	bc 01       	movw	r22, r24
 2be:	cd 01       	movw	r24, r26
 2c0:	60 1b       	sub	r22, r16
 2c2:	71 0b       	sbc	r23, r17
 2c4:	82 0b       	sbc	r24, r18
 2c6:	93 0b       	sbc	r25, r19
 2c8:	0e 94 9a 02 	call	0x534	; 0x534 <__floatunsisf>
 2cc:	60 93 dd 00 	sts	0x00DD, r22	; 0x8000dd <full_rotation>
 2d0:	70 93 de 00 	sts	0x00DE, r23	; 0x8000de <full_rotation+0x1>
 2d4:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <full_rotation+0x2>
 2d8:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <full_rotation+0x3>
			one_deg = full_rotation/360;
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	44 eb       	ldi	r20, 0xB4	; 180
 2e2:	53 e4       	ldi	r21, 0x43	; 67
 2e4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__divsf3>
 2e8:	60 93 d9 00 	sts	0x00D9, r22	; 0x8000d9 <one_deg>
 2ec:	70 93 da 00 	sts	0x00DA, r23	; 0x8000da <one_deg+0x1>
 2f0:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <one_deg+0x2>
 2f4:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <one_deg+0x3>
			prev_state=0;               // in order to calculate the next full rotation
 2f8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <prev_state>
 			angle_0_t=micros();
 2fc:	0e 94 c4 01 	call	0x388	; 0x388 <micros>
 300:	60 93 ae 01 	sts	0x01AE, r22	; 0x8001ae <angle_0_t>
 304:	70 93 af 01 	sts	0x01AF, r23	; 0x8001af <angle_0_t+0x1>
 308:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <angle_0_t+0x2>
 30c:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <angle_0_t+0x3>
			sei();
 310:	78 94       	sei
				text_ok=1;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
		}
		
	}
	
	
}
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_9>:

ISR(TIMER0_OVF_vect)
{
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
	overflows_count++;       // timer flag is cleared by hardware after executing the interrupt
 350:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <overflows_count>
 354:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <overflows_count+0x1>
 358:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <overflows_count+0x2>
 35c:	b0 91 ed 00 	lds	r27, 0x00ED	; 0x8000ed <overflows_count+0x3>
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	a1 1d       	adc	r26, r1
 364:	b1 1d       	adc	r27, r1
 366:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <overflows_count>
 36a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <overflows_count+0x1>
 36e:	a0 93 ec 00 	sts	0x00EC, r26	; 0x8000ec <overflows_count+0x2>
 372:	b0 93 ed 00 	sts	0x00ED, r27	; 0x8000ed <overflows_count+0x3>
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <micros>:

extern unsigned long overflows_count;

unsigned long micros() {
	unsigned long overflows;
	uint8_t oldSREG = SREG, t;
 388:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 38a:	f8 94       	cli
	overflows = overflows_count;
 38c:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <overflows_count>
 390:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <overflows_count+0x1>
 394:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <overflows_count+0x2>
 398:	b0 91 ed 00 	lds	r27, 0x00ED	; 0x8000ed <overflows_count+0x3>
	t = TCNT0;
 39c:	22 b7       	in	r18, 0x32	; 50
	
	if ((TIFR & (1<<TOV0)) && (t < 255))          // current counts before overflow (before entering the ISR)
 39e:	08 b6       	in	r0, 0x38	; 56
 3a0:	00 fe       	sbrs	r0, 0
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <micros+0x26>
 3a4:	2f 3f       	cpi	r18, 0xFF	; 255
 3a6:	19 f0       	breq	.+6      	; 0x3ae <micros+0x26>
	overflows++;
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	a1 1d       	adc	r26, r1
 3ac:	b1 1d       	adc	r27, r1
	
	SREG = oldSREG;
 3ae:	3f bf       	out	0x3f, r19	; 63
	
	unsigned long result = ( (overflows*256) + t) *4;
 3b0:	ba 2f       	mov	r27, r26
 3b2:	a9 2f       	mov	r26, r25
 3b4:	98 2f       	mov	r25, r24
 3b6:	88 27       	eor	r24, r24
 3b8:	82 0f       	add	r24, r18
 3ba:	91 1d       	adc	r25, r1
 3bc:	a1 1d       	adc	r26, r1
 3be:	b1 1d       	adc	r27, r1
 3c0:	bc 01       	movw	r22, r24
 3c2:	cd 01       	movw	r24, r26
 3c4:	66 0f       	add	r22, r22
 3c6:	77 1f       	adc	r23, r23
 3c8:	88 1f       	adc	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	88 1f       	adc	r24, r24
 3d2:	99 1f       	adc	r25, r25
	
	return result;
}
 3d4:	08 95       	ret

000003d6 <micros_init>:

void micros_init()
{
	TCCR0 = 0x00;				// Normal mode
 3d6:	13 be       	out	0x33, r1	; 51
	TCNT0=0;					// timer starting value
 3d8:	12 be       	out	0x32, r1	; 50
	TCCR0 = 0b00000011;		   // start timer by setting prescaler to 64
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);	   // enable TIMER0 overflow interrupt
 3de:	89 b7       	in	r24, 0x39	; 57
 3e0:	81 60       	ori	r24, 0x01	; 1
 3e2:	89 bf       	out	0x39, r24	; 57
	sei();                     // enable global interrupts
 3e4:	78 94       	sei
 3e6:	08 95       	ret

000003e8 <__cmpsf2>:
 3e8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__fp_cmp>
 3ec:	08 f4       	brcc	.+2      	; 0x3f0 <__cmpsf2+0x8>
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	08 95       	ret

000003f2 <__divsf3>:
 3f2:	0e 94 0d 02 	call	0x41a	; 0x41a <__divsf3x>
 3f6:	0c 94 12 03 	jmp	0x624	; 0x624 <__fp_round>
 3fa:	0e 94 0b 03 	call	0x616	; 0x616 <__fp_pscB>
 3fe:	58 f0       	brcs	.+22     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
 400:	0e 94 04 03 	call	0x608	; 0x608 <__fp_pscA>
 404:	40 f0       	brcs	.+16     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
 406:	29 f4       	brne	.+10     	; 0x412 <__DATA_REGION_LENGTH__+0x12>
 408:	5f 3f       	cpi	r21, 0xFF	; 255
 40a:	29 f0       	breq	.+10     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
 40c:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_inf>
 410:	51 11       	cpse	r21, r1
 412:	0c 94 46 03 	jmp	0x68c	; 0x68c <__fp_szero>
 416:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_nan>

0000041a <__divsf3x>:
 41a:	0e 94 23 03 	call	0x646	; 0x646 <__fp_split3>
 41e:	68 f3       	brcs	.-38     	; 0x3fa <__divsf3+0x8>

00000420 <__divsf3_pse>:
 420:	99 23       	and	r25, r25
 422:	b1 f3       	breq	.-20     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 424:	55 23       	and	r21, r21
 426:	91 f3       	breq	.-28     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 428:	95 1b       	sub	r25, r21
 42a:	55 0b       	sbc	r21, r21
 42c:	bb 27       	eor	r27, r27
 42e:	aa 27       	eor	r26, r26
 430:	62 17       	cp	r22, r18
 432:	73 07       	cpc	r23, r19
 434:	84 07       	cpc	r24, r20
 436:	38 f0       	brcs	.+14     	; 0x446 <__divsf3_pse+0x26>
 438:	9f 5f       	subi	r25, 0xFF	; 255
 43a:	5f 4f       	sbci	r21, 0xFF	; 255
 43c:	22 0f       	add	r18, r18
 43e:	33 1f       	adc	r19, r19
 440:	44 1f       	adc	r20, r20
 442:	aa 1f       	adc	r26, r26
 444:	a9 f3       	breq	.-22     	; 0x430 <__divsf3_pse+0x10>
 446:	35 d0       	rcall	.+106    	; 0x4b2 <__stack+0x53>
 448:	0e 2e       	mov	r0, r30
 44a:	3a f0       	brmi	.+14     	; 0x45a <__divsf3_pse+0x3a>
 44c:	e0 e8       	ldi	r30, 0x80	; 128
 44e:	32 d0       	rcall	.+100    	; 0x4b4 <__stack+0x55>
 450:	91 50       	subi	r25, 0x01	; 1
 452:	50 40       	sbci	r21, 0x00	; 0
 454:	e6 95       	lsr	r30
 456:	00 1c       	adc	r0, r0
 458:	ca f7       	brpl	.-14     	; 0x44c <__divsf3_pse+0x2c>
 45a:	2b d0       	rcall	.+86     	; 0x4b2 <__stack+0x53>
 45c:	fe 2f       	mov	r31, r30
 45e:	29 d0       	rcall	.+82     	; 0x4b2 <__stack+0x53>
 460:	66 0f       	add	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	88 1f       	adc	r24, r24
 466:	bb 1f       	adc	r27, r27
 468:	26 17       	cp	r18, r22
 46a:	37 07       	cpc	r19, r23
 46c:	48 07       	cpc	r20, r24
 46e:	ab 07       	cpc	r26, r27
 470:	b0 e8       	ldi	r27, 0x80	; 128
 472:	09 f0       	breq	.+2      	; 0x476 <__stack+0x17>
 474:	bb 0b       	sbc	r27, r27
 476:	80 2d       	mov	r24, r0
 478:	bf 01       	movw	r22, r30
 47a:	ff 27       	eor	r31, r31
 47c:	93 58       	subi	r25, 0x83	; 131
 47e:	5f 4f       	sbci	r21, 0xFF	; 255
 480:	3a f0       	brmi	.+14     	; 0x490 <__stack+0x31>
 482:	9e 3f       	cpi	r25, 0xFE	; 254
 484:	51 05       	cpc	r21, r1
 486:	78 f0       	brcs	.+30     	; 0x4a6 <__stack+0x47>
 488:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_inf>
 48c:	0c 94 46 03 	jmp	0x68c	; 0x68c <__fp_szero>
 490:	5f 3f       	cpi	r21, 0xFF	; 255
 492:	e4 f3       	brlt	.-8      	; 0x48c <__stack+0x2d>
 494:	98 3e       	cpi	r25, 0xE8	; 232
 496:	d4 f3       	brlt	.-12     	; 0x48c <__stack+0x2d>
 498:	86 95       	lsr	r24
 49a:	77 95       	ror	r23
 49c:	67 95       	ror	r22
 49e:	b7 95       	ror	r27
 4a0:	f7 95       	ror	r31
 4a2:	9f 5f       	subi	r25, 0xFF	; 255
 4a4:	c9 f7       	brne	.-14     	; 0x498 <__stack+0x39>
 4a6:	88 0f       	add	r24, r24
 4a8:	91 1d       	adc	r25, r1
 4aa:	96 95       	lsr	r25
 4ac:	87 95       	ror	r24
 4ae:	97 f9       	bld	r25, 7
 4b0:	08 95       	ret
 4b2:	e1 e0       	ldi	r30, 0x01	; 1
 4b4:	66 0f       	add	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	88 1f       	adc	r24, r24
 4ba:	bb 1f       	adc	r27, r27
 4bc:	62 17       	cp	r22, r18
 4be:	73 07       	cpc	r23, r19
 4c0:	84 07       	cpc	r24, r20
 4c2:	ba 07       	cpc	r27, r26
 4c4:	20 f0       	brcs	.+8      	; 0x4ce <__stack+0x6f>
 4c6:	62 1b       	sub	r22, r18
 4c8:	73 0b       	sbc	r23, r19
 4ca:	84 0b       	sbc	r24, r20
 4cc:	ba 0b       	sbc	r27, r26
 4ce:	ee 1f       	adc	r30, r30
 4d0:	88 f7       	brcc	.-30     	; 0x4b4 <__stack+0x55>
 4d2:	e0 95       	com	r30
 4d4:	08 95       	ret

000004d6 <__fixunssfsi>:
 4d6:	0e 94 2b 03 	call	0x656	; 0x656 <__fp_splitA>
 4da:	88 f0       	brcs	.+34     	; 0x4fe <__fixunssfsi+0x28>
 4dc:	9f 57       	subi	r25, 0x7F	; 127
 4de:	98 f0       	brcs	.+38     	; 0x506 <__fixunssfsi+0x30>
 4e0:	b9 2f       	mov	r27, r25
 4e2:	99 27       	eor	r25, r25
 4e4:	b7 51       	subi	r27, 0x17	; 23
 4e6:	b0 f0       	brcs	.+44     	; 0x514 <__fixunssfsi+0x3e>
 4e8:	e1 f0       	breq	.+56     	; 0x522 <__fixunssfsi+0x4c>
 4ea:	66 0f       	add	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	1a f0       	brmi	.+6      	; 0x4fa <__fixunssfsi+0x24>
 4f4:	ba 95       	dec	r27
 4f6:	c9 f7       	brne	.-14     	; 0x4ea <__fixunssfsi+0x14>
 4f8:	14 c0       	rjmp	.+40     	; 0x522 <__fixunssfsi+0x4c>
 4fa:	b1 30       	cpi	r27, 0x01	; 1
 4fc:	91 f0       	breq	.+36     	; 0x522 <__fixunssfsi+0x4c>
 4fe:	0e 94 45 03 	call	0x68a	; 0x68a <__fp_zero>
 502:	b1 e0       	ldi	r27, 0x01	; 1
 504:	08 95       	ret
 506:	0c 94 45 03 	jmp	0x68a	; 0x68a <__fp_zero>
 50a:	67 2f       	mov	r22, r23
 50c:	78 2f       	mov	r23, r24
 50e:	88 27       	eor	r24, r24
 510:	b8 5f       	subi	r27, 0xF8	; 248
 512:	39 f0       	breq	.+14     	; 0x522 <__fixunssfsi+0x4c>
 514:	b9 3f       	cpi	r27, 0xF9	; 249
 516:	cc f3       	brlt	.-14     	; 0x50a <__fixunssfsi+0x34>
 518:	86 95       	lsr	r24
 51a:	77 95       	ror	r23
 51c:	67 95       	ror	r22
 51e:	b3 95       	inc	r27
 520:	d9 f7       	brne	.-10     	; 0x518 <__fixunssfsi+0x42>
 522:	3e f4       	brtc	.+14     	; 0x532 <__fixunssfsi+0x5c>
 524:	90 95       	com	r25
 526:	80 95       	com	r24
 528:	70 95       	com	r23
 52a:	61 95       	neg	r22
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	8f 4f       	sbci	r24, 0xFF	; 255
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	08 95       	ret

00000534 <__floatunsisf>:
 534:	e8 94       	clt
 536:	09 c0       	rjmp	.+18     	; 0x54a <__floatsisf+0x12>

00000538 <__floatsisf>:
 538:	97 fb       	bst	r25, 7
 53a:	3e f4       	brtc	.+14     	; 0x54a <__floatsisf+0x12>
 53c:	90 95       	com	r25
 53e:	80 95       	com	r24
 540:	70 95       	com	r23
 542:	61 95       	neg	r22
 544:	7f 4f       	sbci	r23, 0xFF	; 255
 546:	8f 4f       	sbci	r24, 0xFF	; 255
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	99 23       	and	r25, r25
 54c:	a9 f0       	breq	.+42     	; 0x578 <__floatsisf+0x40>
 54e:	f9 2f       	mov	r31, r25
 550:	96 e9       	ldi	r25, 0x96	; 150
 552:	bb 27       	eor	r27, r27
 554:	93 95       	inc	r25
 556:	f6 95       	lsr	r31
 558:	87 95       	ror	r24
 55a:	77 95       	ror	r23
 55c:	67 95       	ror	r22
 55e:	b7 95       	ror	r27
 560:	f1 11       	cpse	r31, r1
 562:	f8 cf       	rjmp	.-16     	; 0x554 <__floatsisf+0x1c>
 564:	fa f4       	brpl	.+62     	; 0x5a4 <__floatsisf+0x6c>
 566:	bb 0f       	add	r27, r27
 568:	11 f4       	brne	.+4      	; 0x56e <__floatsisf+0x36>
 56a:	60 ff       	sbrs	r22, 0
 56c:	1b c0       	rjmp	.+54     	; 0x5a4 <__floatsisf+0x6c>
 56e:	6f 5f       	subi	r22, 0xFF	; 255
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	16 c0       	rjmp	.+44     	; 0x5a4 <__floatsisf+0x6c>
 578:	88 23       	and	r24, r24
 57a:	11 f0       	breq	.+4      	; 0x580 <__floatsisf+0x48>
 57c:	96 e9       	ldi	r25, 0x96	; 150
 57e:	11 c0       	rjmp	.+34     	; 0x5a2 <__floatsisf+0x6a>
 580:	77 23       	and	r23, r23
 582:	21 f0       	breq	.+8      	; 0x58c <__floatsisf+0x54>
 584:	9e e8       	ldi	r25, 0x8E	; 142
 586:	87 2f       	mov	r24, r23
 588:	76 2f       	mov	r23, r22
 58a:	05 c0       	rjmp	.+10     	; 0x596 <__floatsisf+0x5e>
 58c:	66 23       	and	r22, r22
 58e:	71 f0       	breq	.+28     	; 0x5ac <__floatsisf+0x74>
 590:	96 e8       	ldi	r25, 0x86	; 134
 592:	86 2f       	mov	r24, r22
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	2a f0       	brmi	.+10     	; 0x5a4 <__floatsisf+0x6c>
 59a:	9a 95       	dec	r25
 59c:	66 0f       	add	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	88 1f       	adc	r24, r24
 5a2:	da f7       	brpl	.-10     	; 0x59a <__floatsisf+0x62>
 5a4:	88 0f       	add	r24, r24
 5a6:	96 95       	lsr	r25
 5a8:	87 95       	ror	r24
 5aa:	97 f9       	bld	r25, 7
 5ac:	08 95       	ret

000005ae <__fp_cmp>:
 5ae:	99 0f       	add	r25, r25
 5b0:	00 08       	sbc	r0, r0
 5b2:	55 0f       	add	r21, r21
 5b4:	aa 0b       	sbc	r26, r26
 5b6:	e0 e8       	ldi	r30, 0x80	; 128
 5b8:	fe ef       	ldi	r31, 0xFE	; 254
 5ba:	16 16       	cp	r1, r22
 5bc:	17 06       	cpc	r1, r23
 5be:	e8 07       	cpc	r30, r24
 5c0:	f9 07       	cpc	r31, r25
 5c2:	c0 f0       	brcs	.+48     	; 0x5f4 <__fp_cmp+0x46>
 5c4:	12 16       	cp	r1, r18
 5c6:	13 06       	cpc	r1, r19
 5c8:	e4 07       	cpc	r30, r20
 5ca:	f5 07       	cpc	r31, r21
 5cc:	98 f0       	brcs	.+38     	; 0x5f4 <__fp_cmp+0x46>
 5ce:	62 1b       	sub	r22, r18
 5d0:	73 0b       	sbc	r23, r19
 5d2:	84 0b       	sbc	r24, r20
 5d4:	95 0b       	sbc	r25, r21
 5d6:	39 f4       	brne	.+14     	; 0x5e6 <__fp_cmp+0x38>
 5d8:	0a 26       	eor	r0, r26
 5da:	61 f0       	breq	.+24     	; 0x5f4 <__fp_cmp+0x46>
 5dc:	23 2b       	or	r18, r19
 5de:	24 2b       	or	r18, r20
 5e0:	25 2b       	or	r18, r21
 5e2:	21 f4       	brne	.+8      	; 0x5ec <__fp_cmp+0x3e>
 5e4:	08 95       	ret
 5e6:	0a 26       	eor	r0, r26
 5e8:	09 f4       	brne	.+2      	; 0x5ec <__fp_cmp+0x3e>
 5ea:	a1 40       	sbci	r26, 0x01	; 1
 5ec:	a6 95       	lsr	r26
 5ee:	8f ef       	ldi	r24, 0xFF	; 255
 5f0:	81 1d       	adc	r24, r1
 5f2:	81 1d       	adc	r24, r1
 5f4:	08 95       	ret

000005f6 <__fp_inf>:
 5f6:	97 f9       	bld	r25, 7
 5f8:	9f 67       	ori	r25, 0x7F	; 127
 5fa:	80 e8       	ldi	r24, 0x80	; 128
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	08 95       	ret

00000602 <__fp_nan>:
 602:	9f ef       	ldi	r25, 0xFF	; 255
 604:	80 ec       	ldi	r24, 0xC0	; 192
 606:	08 95       	ret

00000608 <__fp_pscA>:
 608:	00 24       	eor	r0, r0
 60a:	0a 94       	dec	r0
 60c:	16 16       	cp	r1, r22
 60e:	17 06       	cpc	r1, r23
 610:	18 06       	cpc	r1, r24
 612:	09 06       	cpc	r0, r25
 614:	08 95       	ret

00000616 <__fp_pscB>:
 616:	00 24       	eor	r0, r0
 618:	0a 94       	dec	r0
 61a:	12 16       	cp	r1, r18
 61c:	13 06       	cpc	r1, r19
 61e:	14 06       	cpc	r1, r20
 620:	05 06       	cpc	r0, r21
 622:	08 95       	ret

00000624 <__fp_round>:
 624:	09 2e       	mov	r0, r25
 626:	03 94       	inc	r0
 628:	00 0c       	add	r0, r0
 62a:	11 f4       	brne	.+4      	; 0x630 <__fp_round+0xc>
 62c:	88 23       	and	r24, r24
 62e:	52 f0       	brmi	.+20     	; 0x644 <__fp_round+0x20>
 630:	bb 0f       	add	r27, r27
 632:	40 f4       	brcc	.+16     	; 0x644 <__fp_round+0x20>
 634:	bf 2b       	or	r27, r31
 636:	11 f4       	brne	.+4      	; 0x63c <__fp_round+0x18>
 638:	60 ff       	sbrs	r22, 0
 63a:	04 c0       	rjmp	.+8      	; 0x644 <__fp_round+0x20>
 63c:	6f 5f       	subi	r22, 0xFF	; 255
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	8f 4f       	sbci	r24, 0xFF	; 255
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	08 95       	ret

00000646 <__fp_split3>:
 646:	57 fd       	sbrc	r21, 7
 648:	90 58       	subi	r25, 0x80	; 128
 64a:	44 0f       	add	r20, r20
 64c:	55 1f       	adc	r21, r21
 64e:	59 f0       	breq	.+22     	; 0x666 <__fp_splitA+0x10>
 650:	5f 3f       	cpi	r21, 0xFF	; 255
 652:	71 f0       	breq	.+28     	; 0x670 <__fp_splitA+0x1a>
 654:	47 95       	ror	r20

00000656 <__fp_splitA>:
 656:	88 0f       	add	r24, r24
 658:	97 fb       	bst	r25, 7
 65a:	99 1f       	adc	r25, r25
 65c:	61 f0       	breq	.+24     	; 0x676 <__fp_splitA+0x20>
 65e:	9f 3f       	cpi	r25, 0xFF	; 255
 660:	79 f0       	breq	.+30     	; 0x680 <__fp_splitA+0x2a>
 662:	87 95       	ror	r24
 664:	08 95       	ret
 666:	12 16       	cp	r1, r18
 668:	13 06       	cpc	r1, r19
 66a:	14 06       	cpc	r1, r20
 66c:	55 1f       	adc	r21, r21
 66e:	f2 cf       	rjmp	.-28     	; 0x654 <__fp_split3+0xe>
 670:	46 95       	lsr	r20
 672:	f1 df       	rcall	.-30     	; 0x656 <__fp_splitA>
 674:	08 c0       	rjmp	.+16     	; 0x686 <__fp_splitA+0x30>
 676:	16 16       	cp	r1, r22
 678:	17 06       	cpc	r1, r23
 67a:	18 06       	cpc	r1, r24
 67c:	99 1f       	adc	r25, r25
 67e:	f1 cf       	rjmp	.-30     	; 0x662 <__fp_splitA+0xc>
 680:	86 95       	lsr	r24
 682:	71 05       	cpc	r23, r1
 684:	61 05       	cpc	r22, r1
 686:	08 94       	sec
 688:	08 95       	ret

0000068a <__fp_zero>:
 68a:	e8 94       	clt

0000068c <__fp_szero>:
 68c:	bb 27       	eor	r27, r27
 68e:	66 27       	eor	r22, r22
 690:	77 27       	eor	r23, r23
 692:	cb 01       	movw	r24, r22
 694:	97 f9       	bld	r25, 7
 696:	08 95       	ret

00000698 <__gesf2>:
 698:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__fp_cmp>
 69c:	08 f4       	brcc	.+2      	; 0x6a0 <__gesf2+0x8>
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	08 95       	ret

000006a2 <__mulsf3>:
 6a2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3x>
 6a6:	0c 94 12 03 	jmp	0x624	; 0x624 <__fp_round>
 6aa:	0e 94 04 03 	call	0x608	; 0x608 <__fp_pscA>
 6ae:	38 f0       	brcs	.+14     	; 0x6be <__mulsf3+0x1c>
 6b0:	0e 94 0b 03 	call	0x616	; 0x616 <__fp_pscB>
 6b4:	20 f0       	brcs	.+8      	; 0x6be <__mulsf3+0x1c>
 6b6:	95 23       	and	r25, r21
 6b8:	11 f0       	breq	.+4      	; 0x6be <__mulsf3+0x1c>
 6ba:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_inf>
 6be:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_nan>
 6c2:	11 24       	eor	r1, r1
 6c4:	0c 94 46 03 	jmp	0x68c	; 0x68c <__fp_szero>

000006c8 <__mulsf3x>:
 6c8:	0e 94 23 03 	call	0x646	; 0x646 <__fp_split3>
 6cc:	70 f3       	brcs	.-36     	; 0x6aa <__mulsf3+0x8>

000006ce <__mulsf3_pse>:
 6ce:	95 9f       	mul	r25, r21
 6d0:	c1 f3       	breq	.-16     	; 0x6c2 <__mulsf3+0x20>
 6d2:	95 0f       	add	r25, r21
 6d4:	50 e0       	ldi	r21, 0x00	; 0
 6d6:	55 1f       	adc	r21, r21
 6d8:	62 9f       	mul	r22, r18
 6da:	f0 01       	movw	r30, r0
 6dc:	72 9f       	mul	r23, r18
 6de:	bb 27       	eor	r27, r27
 6e0:	f0 0d       	add	r31, r0
 6e2:	b1 1d       	adc	r27, r1
 6e4:	63 9f       	mul	r22, r19
 6e6:	aa 27       	eor	r26, r26
 6e8:	f0 0d       	add	r31, r0
 6ea:	b1 1d       	adc	r27, r1
 6ec:	aa 1f       	adc	r26, r26
 6ee:	64 9f       	mul	r22, r20
 6f0:	66 27       	eor	r22, r22
 6f2:	b0 0d       	add	r27, r0
 6f4:	a1 1d       	adc	r26, r1
 6f6:	66 1f       	adc	r22, r22
 6f8:	82 9f       	mul	r24, r18
 6fa:	22 27       	eor	r18, r18
 6fc:	b0 0d       	add	r27, r0
 6fe:	a1 1d       	adc	r26, r1
 700:	62 1f       	adc	r22, r18
 702:	73 9f       	mul	r23, r19
 704:	b0 0d       	add	r27, r0
 706:	a1 1d       	adc	r26, r1
 708:	62 1f       	adc	r22, r18
 70a:	83 9f       	mul	r24, r19
 70c:	a0 0d       	add	r26, r0
 70e:	61 1d       	adc	r22, r1
 710:	22 1f       	adc	r18, r18
 712:	74 9f       	mul	r23, r20
 714:	33 27       	eor	r19, r19
 716:	a0 0d       	add	r26, r0
 718:	61 1d       	adc	r22, r1
 71a:	23 1f       	adc	r18, r19
 71c:	84 9f       	mul	r24, r20
 71e:	60 0d       	add	r22, r0
 720:	21 1d       	adc	r18, r1
 722:	82 2f       	mov	r24, r18
 724:	76 2f       	mov	r23, r22
 726:	6a 2f       	mov	r22, r26
 728:	11 24       	eor	r1, r1
 72a:	9f 57       	subi	r25, 0x7F	; 127
 72c:	50 40       	sbci	r21, 0x00	; 0
 72e:	9a f0       	brmi	.+38     	; 0x756 <__mulsf3_pse+0x88>
 730:	f1 f0       	breq	.+60     	; 0x76e <__mulsf3_pse+0xa0>
 732:	88 23       	and	r24, r24
 734:	4a f0       	brmi	.+18     	; 0x748 <__mulsf3_pse+0x7a>
 736:	ee 0f       	add	r30, r30
 738:	ff 1f       	adc	r31, r31
 73a:	bb 1f       	adc	r27, r27
 73c:	66 1f       	adc	r22, r22
 73e:	77 1f       	adc	r23, r23
 740:	88 1f       	adc	r24, r24
 742:	91 50       	subi	r25, 0x01	; 1
 744:	50 40       	sbci	r21, 0x00	; 0
 746:	a9 f7       	brne	.-22     	; 0x732 <__mulsf3_pse+0x64>
 748:	9e 3f       	cpi	r25, 0xFE	; 254
 74a:	51 05       	cpc	r21, r1
 74c:	80 f0       	brcs	.+32     	; 0x76e <__mulsf3_pse+0xa0>
 74e:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_inf>
 752:	0c 94 46 03 	jmp	0x68c	; 0x68c <__fp_szero>
 756:	5f 3f       	cpi	r21, 0xFF	; 255
 758:	e4 f3       	brlt	.-8      	; 0x752 <__mulsf3_pse+0x84>
 75a:	98 3e       	cpi	r25, 0xE8	; 232
 75c:	d4 f3       	brlt	.-12     	; 0x752 <__mulsf3_pse+0x84>
 75e:	86 95       	lsr	r24
 760:	77 95       	ror	r23
 762:	67 95       	ror	r22
 764:	b7 95       	ror	r27
 766:	f7 95       	ror	r31
 768:	e7 95       	ror	r30
 76a:	9f 5f       	subi	r25, 0xFF	; 255
 76c:	c1 f7       	brne	.-16     	; 0x75e <__mulsf3_pse+0x90>
 76e:	fe 2b       	or	r31, r30
 770:	88 0f       	add	r24, r24
 772:	91 1d       	adc	r25, r1
 774:	96 95       	lsr	r25
 776:	87 95       	ror	r24
 778:	97 f9       	bld	r25, 7
 77a:	08 95       	ret

0000077c <_exit>:
 77c:	f8 94       	cli

0000077e <__stop_program>:
 77e:	ff cf       	rjmp	.-2      	; 0x77e <__stop_program>
